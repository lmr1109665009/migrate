package com.chen.common.attachment.impl;import com.chen.common.attachment.AttachmentHandler;import com.chen.demo.model.SysFile;import io.minio.MinioClient;import io.minio.errors.MinioException;import org.apache.commons.lang3.StringUtils;import java.io.InputStream;import java.io.OutputStream;import java.util.ArrayList;import java.util.List;/** * @program: bpmx-parent * @description: 云存储处理类 * @author: liuhai * @create: 2018-07-05 13:23 **/public class CloudAttachmentHandler implements AttachmentHandler {    private String url;					/*服务器地址*/    private int port = 9000;			/*端口*/    private String accessKey;			/*登陆账号*/    private String secretKey;			/*密码*/    private String defaultBucket;       /*默认存储的桶*/    private static MinioClient minioClient;    public String getUrl() {        return url;    }    public void setUrl(String url) {        this.url = url;    }    public int getPort() {        return port;    }    public void setPort(int port) {        this.port = port;    }    public String getAccessKey() {        return accessKey;    }    public void setAccessKey(String accessKey) {        this.accessKey = accessKey;    }    public String getSecretKey() {        return secretKey;    }    public void setSecretKey(String secretKey) {        this.secretKey = secretKey;    }    public String getDefaultBucket() {        return defaultBucket;    }    public void setDefaultBucket(String defaultBucket) {        this.defaultBucket = defaultBucket;    }    public String getType(){        return "cloud";    }    private void initMinioClient() throws Exception{        minioClient = new MinioClient(url, port, accessKey, secretKey);    }    @Override    public void remove(SysFile sysFile) throws Exception {        String path = sysFile.getFilePath();        //路径        String bucketName = sysFile.getBucket();    //桶        path = path.replace("\\","/");        if(StringUtils.isEmpty(bucketName)){            bucketName = defaultBucket;        }        if(null == minioClient){            initMinioClient();        }        if(StringUtils.isEmpty(bucketName)){            throw new MinioException("未找到桶,bucketName:"+bucketName);        }        minioClient.removeObject(bucketName, path);    }    /** 批量同一桶中文件 **/    public void removeList(List<SysFile> sysFiles, String bucketName) throws Exception{        if(null != sysFiles && sysFiles.size() > 0){            List<String> paths = new ArrayList<>();            for(SysFile file:sysFiles){                String path = file.getFilePath();                path = path.replace("\\","/");                paths.add(path);            }            if(paths.size() > 0){                if(null == minioClient){                    initMinioClient();                }                if(StringUtils.isEmpty(bucketName)){                    throw new MinioException("未找到桶,bucketName:"+bucketName);                }                minioClient.removeObject(bucketName, paths);            }        }    }    @Override    public void upload(SysFile sysFile, InputStream inputStream) throws Exception {        String path = sysFile.getFilePath();    //路径        String bucketName = sysFile.getBucket();//桶        path = path.replace("\\","/");        try {            if(null == minioClient){                initMinioClient();            }            if(StringUtils.isEmpty(bucketName)){                bucketName = defaultBucket;            }            boolean isExist = minioClient.bucketExists(bucketName);            if(!isExist){                minioClient.makeBucket(bucketName);            }            minioClient.putObject(bucketName, path, inputStream, inputStream.available(), "application/octet-stream");        } catch (Exception e) {            throw new MinioException("上传文件异常:"+e+", bucketName:"+bucketName+",path:"+path);        } finally {            if(null != inputStream){                inputStream.close();            }        }    }    @Override    public void download(SysFile sysFile, OutputStream outStream) throws Exception {        download(sysFile, outStream, true);    }    @Override    public void download(SysFile sysFile, OutputStream outStream, boolean isCloseOutStream) throws Exception {        String path = sysFile.getFilePath();    //路径        String bucketName = sysFile.getBucket();//桶        path = path.replace("\\","/");        try {            if(null == minioClient){                initMinioClient();            }            if(StringUtils.isEmpty(bucketName)){                bucketName = defaultBucket;            }            if(StringUtils.isEmpty(bucketName)){                throw new MinioException("未找到桶,bucketName:"+bucketName);            }            InputStream in = minioClient.getObject(bucketName, path);            byte[] buff = new byte[1024*2];            int len;            while((len = in.read(buff)) > 0){                outStream.write(buff, 0, len);            }        } catch (Exception e) {            throw new MinioException("下载文件异常："+e+", bucketName:"+bucketName+",path:"+path);        } finally {            if(isCloseOutStream){                outStream.close();            }        }    }    @Override    public String getFileUrl(SysFile sysFile, Integer expireDate) throws Exception{        String path = sysFile.getFilePath();    //路径        String bucketName = sysFile.getBucket();//桶        path = path.replace("\\","/");        try {            if(null == minioClient){                initMinioClient();            }            if(StringUtils.isEmpty(bucketName)){                bucketName = defaultBucket;            }            if(StringUtils.isEmpty(bucketName)){                throw new MinioException("未找到桶,bucketName:"+bucketName);            }            Integer expire = 60 * 60 * 24; //默认过期时间设置为1天            if(null != expireDate){                expire = Integer.valueOf(expireDate);            }            String url = minioClient.presignedGetObject(bucketName, path, expire);            return url;        } catch (Exception e) {            throw new MinioException("获取文件url异常:"+e+",bucketName:"+bucketName+",path:"+path);        }    }}